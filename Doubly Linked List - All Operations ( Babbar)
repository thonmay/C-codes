#include<bits/stdc++.h>
using namespace std;

class Node
{
    public:
        int val;
        Node* next;
        Node* prev;

        Node(int data)
        {
            this->val = data;
            this->next = this->prev = nullptr; 
        }
};

void insertAtHead(Node* &head, int data)
{
    Node* newNode = new Node(data);
    if(head == nullptr)
    {
        head = newNode;
    }
    else
    {
        newNode->next = head;
        head->prev = newNode;
        head = newNode;

    }
}

void insertAtTail(Node* &head, Node* &tail, int data)
{
    Node* newNode = new Node(data);
    
    if(head == nullptr)
        return;
    
    Node* temp = head;
    while(temp->next != nullptr)
    {
        temp = temp->next;
    }
    temp->next = newNode;
    newNode->prev = temp;
    tail = newNode;
    newNode->next = nullptr; 
}

void insertAtTailWithTail(Node* &tail, int data)
{
    Node* newNode = new Node(data);
    if(tail == nullptr)
        return;

    tail->next = newNode;
    newNode->prev = tail;
    tail = newNode;
    newNode->next = nullptr;

}

void insertAtPosition(Node* &head, Node* &tail, int data, int pos)
{
    Node* newNode = new Node(data);
    //If Position is 1
    if(pos == 1)
    {
        insertAtHead(head, data);
        return;
    }
    Node* temp = head;
    int cnt = 1;
    while( cnt < pos - 1 && temp != nullptr)
    {
        temp = temp->next;
        cnt++;
    }
    //Inserting at Tail
    if(temp == nullptr || temp->next == nullptr)
    {
        insertAtTailWithTail(tail, data);
        return;
    }
    newNode->prev = temp;
    newNode->next = temp->next;
    temp->next->prev = newNode;
    temp->next = newNode;

}

void deleteAtPos(Node* &head, Node* &tail, int pos)
{
    if(pos == 1)
    {
        head = head->next;
        head->prev = nullptr;
        return;
    }
    Node* pre = nullptr;
    Node* curr = head;
    int cnt = 1;
    while ( cnt < pos && curr != nullptr)
    {
        pre = curr;
        curr = curr->next;
        cnt++;
    }
    //Deleting the Tail node
    if(curr == nullptr || curr->next == nullptr)
    {   
        pre->next = curr->next;
        curr->next = nullptr;
        tail = pre;
        return;
    }
    else
    {
        pre->next = curr->next;
        curr->next->prev = pre;
        curr->prev = nullptr;
        curr->next = nullptr;
    }
}

void deleteByVal(Node* &head, Node* &tail, int data)
{
    if( head->val == data)
    {
        head = head->next;
        head->prev = nullptr;
        return;
    }
    Node* pre = nullptr;
    Node* curr = head;
    while (curr->val != data && curr != nullptr)
    {
        pre = curr;
        curr = curr->next;
    }
    //When it's Tail Node
    if(curr->next == nullptr)
    {
        pre->next = curr->next;
        tail = pre;
        return;
    }
    else
    {
        pre->next = curr->next;
        curr->next->prev = pre;
        curr->prev = nullptr;
        curr->next = nullptr;
    }
}

void printLinkedList(Node* &head)
{
    Node* temp = head;
    while(temp != nullptr)
    {
        cout << temp->val << " ";
        temp = temp->next;
    }
    cout << endl;
}

int lengthOfLinkedList(Node* &head)
{
    if(head == nullptr)
        return 0;

    Node* temp = head;
    int cnt = 0;
    while(temp != nullptr)
    {
        cnt++;
        temp = temp->next;
    }
    return cnt;
}

int main()
{
    Node* head = nullptr;
    Node* tail = nullptr;

    Node* newNode = new Node(10);

    head = newNode;
    tail = newNode;

    insertAtHead(head, 25);
    insertAtHead(head, 36);
    insertAtTailWithTail(tail, 7);
    insertAtTailWithTail(tail, 16);

    insertAtPosition(head, tail, 20, 1);

    deleteByVal(head, tail, 36);

    printLinkedList(head);
    cout << "Length: " << lengthOfLinkedList(head);

    cout << "\nHead: " << head->val << endl;
    cout << "Tail: " << tail->val << endl;


}
